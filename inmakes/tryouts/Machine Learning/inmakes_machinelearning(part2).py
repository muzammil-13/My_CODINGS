# -*- coding: utf-8 -*-
"""inmakes_MachineLearning(part2).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1IiefdNQDy4j592KeLLAIXcLSbOj2oMxs

# Data Preprocessing
"""

import numpy as np

import pandas as pd

import seaborn as sns

df=pd.read_csv("House_Price.csv")

df

"""# EDD in python"""

df.shape

df.describe()

"""# Outlier treatment"""

df.describe()

sns.boxplot(y='n_hos_beds',data=df)

sns.boxplot(y='n_hot_rooms',data=df)

sns.jointplot(x="rainfall",y="Sold",data=df)

sns.countplot(x="airport",data=df)

sns.countplot(x="waterbody",data=df)

sns.countplot(x='bus_ter',data=df)

#observation:
# missing values in n_hos_beds
# bus_ter provides no addition information
# n_hot_rooms and rainfall have outliers

"""# Outlier treatment part2"""

np.percentile(df.n_hot_rooms,[99][0])

uv=np.percentile(df.n_hot_rooms,[99][0])

df.n_hot_rooms[(df.n_hot_rooms>3*uv)]=3*uv

df[(df.n_hot_rooms>uv)]

np.percentile(df.rainfall,[1][0])

lv=np.percentile(df.rainfall,[1][0])

df[df.rainfall<lv]

df.rainfall[(df.rainfall<3.0*lv)]=0.3*lv

df.describe()

"""# Missing value imputation part 2"""

df.info()

df.n_hos_beds=df.n_hos_beds.fillna(df.n_hos_beds.mean())

df.info()

"""# variable transfomration"""

df['avg_dist']=(df.dist1+df.dist2+df.dist3+df.dist4)/4

df.describe()

del df['dist1']

del df['dist2']

del df['dist3']

del df['dist4']

df.describe()

"""# Dummy variable settings"""

df

df=pd.get_dummies(df)

df.head()

del df['airport_NO']

del df['waterbody_None']

df.head()

"""# **CLASSIFICATION MODELS**

# Training a simple Logistic model in python
"""

# Q) is the particular product get sold within 3 months or not? and gets on the list?

X=df[['price']]

y=df['Sold']

X.head()

y.head()

from sklearn.linear_model import LogisticRegression

clfs_lrs=LogisticRegression()

clfs_lrs.fit(X,y)

clfs_lrs.coef_

clfs_lrs.intercept_

import statsmodels.api as sn

X_const=sn.add_constant(X)

X_const.head()

import statsmodels.discrete.discrete_model as sm

logit=sm.Logit(y,X_const).fit()

logit.summary()

"""# Multiple Preditor"""

X=df.loc[:,df.columns!='Sold']

y=df['Sold']

y.head()

from sklearn.linear_model import LogisticRegression

clfs_lrs=LogisticRegression()

clfs_lrs.fit(X,y)

clfs_lrs.coef_

clfs_lrs.intercept_

import statsmodels.discrete.discrete_model as sm

logit=sm.Logit(y,X_const).fit()

logit.summary()

"""# confusion matrix 2"""

# predicting and confusion matrix

clfs_lrs.predict_proba(X)

y_pred=clfs_lrs.predict(X)

y_pred

y_pred_03=(clfs_lrs.predict_proba(X)[:1]>=0.3).astype(bool)

from sklearn.metrics import confusion_matrix

confusion_matrix(y,y_pred)

"""# Linear discernment analysis"""

from sklearn.discriminant_analysis import LinearDiscriminantAnalysis

clf_lda=LinearDiscriminantAnalysis()

clf_lda.fit(X,y)

y_pred_lda=clf_lda.predict(X)

y_pred_lda

confusion_matrix(y,y_pred_lda)

"""# Test Train split part2"""

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)

print(X_train.shape,X_test.shape,y_train.shape,y_test.shape)

clf_LR=LogisticRegression()

clf_LR.fit(X_train,y_train)

LogisticRegression()

y_test_pred=clf_LR.predict(X_test)

from sklearn.metrics import accuracy_score,confusion_matrix

confusion_matrix(y_test,y_test_pred)

accuracy_score(y_test,y_test_pred)

